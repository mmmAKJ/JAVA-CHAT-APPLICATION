 To complete this project, I used my Java programming skills to create a client-server chat application. The primary skill I applied was socket programming, which is essential for establishing network communication between two programs. I designed a Server.java and a Client.java file to handle the different roles in the chat.On the server side, I used a ServerSocket to listen for incoming connection requests on a specific port, 7777. Once a client connected, the server.accept() method created a Socket object to manage the communication with that specific client. I then created BufferedReader and PrintWriter objects from the socket's input and output streams, respectively. This allowed the server to read messages sent by the client and write messages back to the client.Similarly, on the client side, I used the Socket class to initiate a connection to the server's IP address and port. I also created BufferedReader and PrintWriter objects to handle the reading of messages from the server and writing of messages to the server.A key aspect of this project was handling bidirectional communication concurrently. To achieve this, I used multi-threading. Both the Server and Client classes implemented two separate threads: one for reading messages (startReading()) and one for writing messages (startWriting()). The startReading() thread continuously reads from the input stream, while the startWriting() thread continuously writes to the output stream. This design ensures that the application can simultaneously receive and send messages without one operation blocking the other, allowing for a smooth, real-time chat experience. The communication is terminated when either the client or the server sends the message "exit," which closes the socket and breaks the loops in both threads.
